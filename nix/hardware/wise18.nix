# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usb_storage" "usbhid" "sd_mod" "uas" "ehci_pci" "sdhci_pci" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.kernelParams = ["intel_iommu=on"];
  boot.extraModulePackages = [ ];
  boot.extraModprobeConfig = "options kvm_intel nested=1";

  hardware.enableAllFirmware = true;

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # Since the system has disks managed by disko, we don't want to set filesystems
  # but for now since the extra hard drive is for data external to the os, manage it here
  #fileSystems."/media/sdelcore/data" = {
  #  device = "/dev/disk/by-uuid/588353d4-fcff-4710-bdbe-3b8037f6b2b5";
  #  fsType = "ext4";
  #  options = ["nofail" "x-gvfs-show" "nodev" "nosuid"];
  #};

  swapDevices = [ {
    device = "/media/sdelcore/data/swapfile";
    size = 500*1024;
  } ];
}
